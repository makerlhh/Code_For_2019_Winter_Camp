Interrupt Vectors
    00000 940C 002A JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002A E5CF      LDI	R28,0x5F
    0002B E0D4      LDI	R29,4
    0002C BFCD      OUT	0x3D,R28
    0002D BFDE      OUT	0x3E,R29
    0002E 51CE      SUBI	R28,0x1E
    0002F 40D0      SBCI	R29,0
    00030 EA0A      LDI	R16,0xAA
    00031 8308      ST	Y,R16
    00032 2400      CLR	R0
    00033 E6E0      LDI	R30,0x60
    00034 E0F0      LDI	R31,0
    00035 E010      LDI	R17,0
    00036 36E0      CPI	R30,0x60
    00037 07F1      CPC	R31,R17
    00038 F011      BEQ	0x003B
    00039 9201      ST	Z+,R0
    0003A CFFB      RJMP	0x0036
    0003B 8300      ST	Z,R16
    0003C E5E4      LDI	R30,0x54
    0003D E0F0      LDI	R31,0
    0003E E6A0      LDI	R26,0x60
    0003F E0B0      LDI	R27,0
    00040 E010      LDI	R17,0
    00041 E000      LDI	R16,0
    00042 BF0B      OUT	0x3B,R16
    00043 35E4      CPI	R30,0x54
    00044 07F1      CPC	R31,R17
    00045 F021      BEQ	0x004A
    00046 95C8      LPM
    00047 9631      ADIW	R30,1
    00048 920D      ST	X+,R0
    00049 CFF9      RJMP	0x0043
    0004A 940E 0065 CALL	_main
_exit:
    0004C CFFF      RJMP	_exit
_adcc:
  data                 --> R10
    0004D 92AA      ST	-Y,R10
    0004E 92BA      ST	-Y,R11
FILE: C:\Users\HP\Desktop\1.25ADC课程\课上例程\ADC\ADC.c
(0001) #include<iom16v.h>
(0002) #include<macros.h>
(0003) 
(0004) unsigned int adcc()
(0005) {
(0006)     unsigned int data;
(0007) 	
(0008) 	DDRA&=~BIT(PA0);//
    0004F 98D0      CBI	0x1A,0
(0009) 	PORTA&=~BIT(PA0);
    00050 98D8      CBI	0x1B,0
(0010) 	
(0011) 	ADMUX=0;
    00051 2422      CLR	R2
    00052 B827      OUT	0x07,R2
(0012) 	ADCSRA|=BIT(ADEN);
    00053 9A37      SBI	0x06,7
(0013) 	ADCSRA|=BIT(ADSC);//配置ADC
    00054 9A36      SBI	0x06,6
(0014) 	
(0015) 	while(!(ADCSRA&(BIT(ADIF))));//判断转换是否结束（中断标志置位）
    00055 9B34      SBIS	0x06,4
    00056 CFFE      RJMP	0x0055
(0016) 	
(0017) 	data = ADCL;
    00057 B0A4      IN	R10,0x04
    00058 24BB      CLR	R11
(0018) 	data = data + ADCH*256;//读出转换的数据
    00059 B125      IN	R18,0x05
    0005A 2733      CLR	R19
    0005B E000      LDI	R16,0
    0005C E011      LDI	R17,1
    0005D 940E 0073 CALL	empy16s
    0005F 0EA0      ADD	R10,R16
    00060 1EB1      ADC	R11,R17
(0019)     return data;
    00061 0185      MOVW	R16,R10
    00062 90B9      LD	R11,Y+
    00063 90A9      LD	R10,Y+
    00064 9508      RET
(0020) }
(0021) 
(0022) int main()
(0023) {
(0024)     unsigned int redata;
(0025) 	DDRC|=BIT(PC0);
_main:
  redata               --> R10
    00065 9AA0      SBI	0x14,0
    00066 C00A      RJMP	0x0071
(0026) 	
(0027) 	while(1)
(0028) 	{
(0029) 	    redata = adcc();
    00067 DFE5      RCALL	_adcc
    00068 0158      MOVW	R10,R16
(0030) 		if(redata>512)
    00069 E080      LDI	R24,0
    0006A E092      LDI	R25,2
    0006B 1780      CP	R24,R16
    0006C 0791      CPC	R25,R17
    0006D F410      BCC	0x0070
(0031) 		{
(0032) 		    PORTC&=~BIT(PC0);
    0006E 98A8      CBI	0x15,0
(0033) 		}
    0006F C001      RJMP	0x0071
(0034) 		else
(0035) 		{
(0036) 		    PORTC|=BIT(PC0);
FILE: <library>
    00070 9AA8      SBI	0x15,0
    00071 CFF5      RJMP	0x0067
    00072 9508      RET
empy16s:
    00073 920A      ST	-Y,R0
    00074 921A      ST	-Y,R1
    00075 938A      ST	-Y,R24
    00076 939A      ST	-Y,R25
    00077 9F02      MUL	R16,R18
    00078 01C0      MOVW	R24,R0
    00079 9F12      MUL	R17,R18
    0007A 0D90      ADD	R25,R0
    0007B 9F03      MUL	R16,R19
    0007C 0D90      ADD	R25,R0
    0007D 018C      MOVW	R16,R24
    0007E 9199      LD	R25,Y+
    0007F 9189      LD	R24,Y+
    00080 9019      LD	R1,Y+
    00081 9009      LD	R0,Y+
    00082 9508      RET
